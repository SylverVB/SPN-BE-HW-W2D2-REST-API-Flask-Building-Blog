from app.schemas import ma
from marshmallow import fields, post_load, ValidationError
from app.models import Role
from app.database import db


# Define the Customer Schema
class UserSchema(ma.Schema):
    user_id = fields.Integer(required=False) # id is autogenerated
    first_name = fields.String(required=True)
    last_name = fields.String(required=True)
    username = fields.String(required=True)
    email = fields.String(required=True)
    password = fields.String(required=True)
    role = fields.String(required=False)

    # @post_load
    # def make_user(self, data, **kwargs):
    #     if 'role' in data and isinstance(data['role'], str):
    #         data['role'] = Role(role_name=data['role'])
    #     return data

    @post_load
    def make_user(self, data, **kwargs):
        if 'role' in data and isinstance(data['role'], str):
            role = db.session.execute(db.select(Role).filter_by(role_name=data['role'])).scalar_one_or_none()
            if not role:
                raise ValidationError(f"Role '{data['role']}' does not exist.")
            data['role_id'] = role.role_id
        return data

# Create instances of the schema
user_input_schema = UserSchema()
user_output_schema = UserSchema(exclude=["password"])
users_schema = UserSchema(many=True, exclude=["password"])
user_login_schema = UserSchema(only=["username", "password"])